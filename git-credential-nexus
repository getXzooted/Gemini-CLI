#!/bin/bash
#
# git-credential-nexus
# A Git credential helper that provides the correct PAT for a given repository.

set -e

# This script is called by Git. We need to find the user's home to locate the config.
# A simple `~` won't work as the user context might be different.
# We find the script's own location to determine the user if needed, but a direct path is better.
# Assuming the user running git is the one with the config file.
USER_HOME=$(getent passwd "$(whoami)" | cut -d: -f6)
GIT_AUTH_CONFIG="${USER_HOME}/.config/nexus/git_auth.conf"

if [ ! -f "$GIT_AUTH_CONFIG" ]; then
    # If the config doesn't exist, exit cleanly so Git can try other methods.
    exit 0
fi

# Git provides the protocol, host, etc. on stdin. We read it line by line.
# We only care about the host and protocol to build the URL.
while read -r line; do
    if [[ $line == host=* ]]; then
        host=${line#host=}
    fi
    if [[ $line == protocol=* ]]; then
        protocol=${line#protocol=}
    fi
done

if [ -z "$host" ] || [ -z "$protocol" ]; then
    exit 0
fi

# Reconstruct the base URL to search for in our config file
# This is a simplified approach; a more robust solution would handle different URL formats.
# For GitHub HTTPS, this is generally sufficient.
SEARCH_URL="${protocol}://${host}"

# Find the token for the repository that matches the host.
# This assumes one token per host (e.g., one for github.com).
# A more complex script could parse the full path for repo-specific tokens.
TOKEN=$(grep "repo=.*${SEARCH_URL}" "$GIT_AUTH_CONFIG" | head -n 1 | sed -n 's/.*token=\(.*\)/\1/p')

if [ -n "$TOKEN" ]; then
    # If a token is found, provide it to Git.
    echo "username=token"
    echo "password=${TOKEN}"
fi

